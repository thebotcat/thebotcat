format for addlbotperms:
  addlbotperms : object {
    <userid> : int (perms) (
        bits:
          0 - say
          1 - say remote (also automatically grants say)
          2 - getting list of, getting channel for botcat's dms
          3 - global mute and unmute (only for special guilds)
      ),
    ...
  }

command flags property: &1=full string, &2=public, &4=servers, &8=dms, &16=text, &32=slash

format for content_commands.json:
  content_commands : object {
    <command_name> : (
      object {
        type : string <'text_reply'/'text_send'>,
        content : string,
      }
      object {
        type : string <'text_reply_multi'>,
        contents : array [ string, ... ],
      }
      object {
        type : string <'image'>,
        title : string,
        desc : string,
        image : string,
        footer : string,
      }
      object {
        type : string <'image_multi'>,
        embeds : array [
          object {
            title : string,
            desc : string,
            image : string,
            footer : string,
          },
          ...
        ],
      }
    ),
  }

format for props.saved:
  props.saved : object {
    feat : object {
      calc : bool (default false),
      audio : int 0-3 (default 0; &1 = join/leave, &2 = music),
      lamt : int (default 0),
    },
    guilds : object {
      <guildid> : object {
        prefix : string (default <defaultprefix>),
        confirm_kb : bool (default true),
        enabled_commands : object {
          global : bool (default true),
          categories : object {
            <CommandCategoryName> : bool (default true),
          },
          commands : object {
            <CommandName> : bool (default true),
          },
        },
        logging : object {
          main : string <channelid> / null,
        },
        perms : object {
          <roleid> : int (perms) (
              bits:
                0 - normal bot commands
                1 - bypass channel lock
                2 - get bot to join vc and leave when bot and caller are only people in vc
                3 - get bot to leave vc when there are others
                4 - play songs
                5 - play playlists
                6 - voteskip
                7 - forceskip and remove
                8 - remote music commands
                9 - delete messages
                10 - lock channel
                11 - mute and tempmute
                12 - kick
                13 - ban
                14 - change prefix, logchannel
                15 - complete manage bot
                16 - slowmode and bitrate
            ),
          ...
        },
        overrides : object {
          <channelid> : object {
            <roleid/userid> : object {
              allows : int <perms>,
              denys : int <perms>,
            },
            ...
          },
          ...
        },
        mutedrole : string <roleid> / null,
        basic_automod: {
          bad_words: [
            object {
              enabled : boolean,
              type : number (
                0 - entire message is the word only
                1 - split the message by spaces, and one of those sections exactly matches the word
                2 - word is substring in message
                &4 - convert message and word to lowercase first
              ),
              ignore_admin : boolean,
              ignored_roles : array [
                string <roleid>,
                ...
              ],
              word : string,
              retaliation : string,
            },
            ...
          ],
        },
        events : array [
          object {
            triggers : array [
              (
                object {
                  type : 'sent_message_match',
                  msg_type : <guild.basic_automod.bad_words[x].type>,
                  allowed_roles : array [
                    string <roleid>,
                    ...
                  ],
                  ignored_roles : array [
                    string <roleid>,
                    ...
                  ],
                },
              )
              ...
            ],
            actions : array [
              (
                object {
                  type : 'send_message',
                  content : string,
                  embed : object {
                    title : string / null,
                    description : string / null,
                    fields : array [
                      object {
                        name : string,
                        value : string,
                        inline : boolean,
                      },
                      ...
                    ],
                    footer : string / null,
                  },
                },
              )
              ...
            ],
          },
          ...
        ],
        temp : object {
          stashed : object {
            channeloverrides : object {
              <channelid> : object {
                id : string <roleid/userid>,
                type : string 'role' / 'member',
                allow : int,
                deny : int,
              },
              ...
            },
          },
        },
        [EMPHEMERAL] voice : object {
          channel : null / VoiceChannel,
          connection : null / VoiceConnection,
          dispatcher : null / StreamDispatcher,
          mainloop : int 0 (not playing) / 1 (playing) / 2 (skip request) / 3 (terminate song mainloop),
          songslist : array [
            object {
              url : string,
              desc : string,
              expectedLength : int (msec),
              stream : ytdl object,
            },
            ...
          ],
          volume : null,
          loop : null,
        },
      },
      ...
    },
    users : object {
      'default' / <userid> : object {
        calc_scope : string (math.js calc scope, serialized, 'shared' property added at runtime for a shared calc scope),
        [EMPHEMERAL] calc_scope_running : boolean,
      },
      ...
    },
    disallowed_guilds : array [
      string <guildid>,
      ...
    ],
    misc : object {
      dmchannels : array [
        string <channnelid>,
        ...
      ],
      sendmsgid : string <messageid>,
    },
  }
